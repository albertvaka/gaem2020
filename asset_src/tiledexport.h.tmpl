#pragma once

#include <array>
#include <unordered_map>

#include "vec.h"
#include "bounds.h"
#include "SDL_gpu.h"

struct TiledTiles
{
	static const GPU_Rect tileToTextureRect[];

	enum Value : uint8_t
	{
		NONE = 0,
		{% for t in gids -%}
			{{ tilenames[t] }},
		{% endfor -%}
		SOLID_TRANSPARENT,
	};

	static constexpr Value ONEWAY_BEGIN = ONEWAY_1;
	static constexpr Value RSLOPE_BEGIN = RSLOPE_1;
	static constexpr Value LSLOPE_BEGIN = LSLOPE_1;
	static constexpr Value SOLID_BEGIN = SOLID_1;
	static constexpr Value BREAKABLE_BEGIN = BREAKABLE_1;

	// Aliases
{%- for k, v in aliases.items() %}
	static constexpr Value {{k}} = {{v}};
{%- endfor %}

};

struct TiledMap
{
	static const uint8_t map[];
	static const vec map_size;
	static const std::array<BoxBounds, {{screens|length}}> screens;
};

struct TiledEntities
{
	{% for k, v in entities_by_type.items() -%}
		{%- if v|length > 1 -%}
			static const std::unordered_map<int, vec> {{k}};
		{%- else -%}
			static const vec {{k}};
		{%- endif %}
	{% endfor %}
};

struct TiledAreas
{
	{% for k, v in areas_by_type.items() -%}
		static const std::array<BoxBounds, {{v|length}}> {{k}};
	{% endfor %}
};
