#include "tiledexport.h"

const sf::IntRect TiledTiles::tileToTextureRect[] = {
	{},	//NONE
	{% for t in bg -%}
		{ {{t%tileset_cols}} * {{tilesize}}, {{t//tileset_cols}} * {{tilesize}}, {{tilesize}}, {{tilesize}} }, //={{gid_to_tileid[t]}}, BG_{{ loop.index }}, gid={{t}}
	{% endfor -%}
	{% for t in oneway -%}
		{ {{t%tileset_cols}} * {{tilesize}}, {{t//tileset_cols}} * {{tilesize}}, {{tilesize}}, {{tilesize}} }, //={{gid_to_tileid[t]}}, ONE_WAY_{{ loop.index }}, gid={{t}}
	{% endfor -%}
	{% for t in rslope -%}
		{ {{t%tileset_cols}} * {{tilesize}}, {{t//tileset_cols}} * {{tilesize}}, {{tilesize}}, {{tilesize}} }, //={{gid_to_tileid[t]}}, RIGHT_SLOPE_{{ loop.index }}, gid={{t}}
	{% endfor -%}
	{% for t in lslope -%}
		{ {{t%tileset_cols}} * {{tilesize}}, {{t//tileset_cols}} * {{tilesize}}, {{tilesize}}, {{tilesize}} }, //={{gid_to_tileid[t]}}, LEFT_SLOPE_{{ loop.index }}, gid={{t}}
	{% endfor -%}
	{% for t in solid -%}
		{ {{t%tileset_cols}} * {{tilesize}}, {{t//tileset_cols}} * {{tilesize}}, {{tilesize}}, {{tilesize}} }, //={{gid_to_tileid[t]}}, SOLID_{{ loop.index }}, gid={{t}}
	{% endfor -%}
	{% for t in breakable -%}
		{ {{t%tileset_cols}} * {{tilesize}}, {{t//tileset_cols}} * {{tilesize}}, {{tilesize}}, {{tilesize}} }, //={{gid_to_tileid[t]}}, BREAKABLE_{{ loop.index }}, gid={{t}}
	{% endfor -%}
	{},	//SOLID_TRANSPARENT
};

const sf::Vector2f TiledMap::map_size = sf::Vector2f({{ width }}, {{ height }});

const unsigned short TiledMap::map[] = {
    {% for t in map -%}
		{%- if debug -%}
			{%- if t == 0 -%}{{ ' ' }}{%- else -%}{{ 'x' }}{% endif %} 
		{%- else -%}
			{{ t }},
		{%- endif -%}
	{%- if loop.index%width == 0 %}
	{% endif -%} 
    {%- endfor %}
};

const std::array<sf::Rect<float>, {{screens|length}}> TiledMap::screens = {
	{%- for s in screens %}
	sf::Rect<float>({{s[0]}}f,{{s[1]}}f,{{s[2]}}f,{{s[3]}}f),
	{%- endfor %}
};

{% for k, v in entities_by_type.items() -%}
	{%- if v|length > 1 -%}
const std::array<sf::Vector2f, {{v|length}}> TiledEntities::{{k}} = {
{%- for e in v %}
	sf::Vector2f({{e[0]}}f, {{e[1]}}f),
{%- endfor %}
};
{% else -%}
	const sf::Vector2f TiledEntities::{{k}} = sf::Vector2f({{v[0][0]}}f, {{v[0][1]}}f);
{% endif %}
{% endfor %}

{% for k, v in areas_by_type.items() -%}
	const std::array<sf::Rect<float>, {{v|length}}> TiledAreas::{{k}} = {
		{%- for s in v %}
		sf::Rect<float>({{s[0]}}f,{{s[1]}}f,{{s[2]}}f,{{s[3]}}f),
		{%- endfor %}
	};
{% endfor %}

